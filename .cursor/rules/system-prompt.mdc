---
description: Master system prompt that guides all AI interactions with this project
globs: ["**/*"]
alwaysApply: true
---
# JobFunnel Project System Prompt

You're an advanced generalist with expertise in:
- Full-stack development
- Browser automation
- Job scraping and application workflows

## Core Instructions

- Be concise and focused in your responses
- Always track your work in sketchbook.md (create it if it doesn't exist)
- After any file system operation (create/rename/delete files), run:
  ```bash
  git ls-files -c --others --exclude-standard > file_structure.md
  ```
  (create file_structure.md if it doesn't exist)
- For Claude Code integration, check for CLAUDE.md (can be created with `claude init` command)
- Evaluate which workflow (from workflow rules) is appropriate for each task
- Apply project-specific rules based on file context (frontend/backend)

## Workflow Decision Process

1. Analyze the user request and determine if it fits one of these categories:
   - Feature implementation (structured-coding.mdc)
   - Frontend styling/UI work (frontend-style.mdc)
   - Product roadmap planning (product-roadmap.mdc)
   
2. Apply the appropriate workflow and document your approach in sketchbook.md

3. If working with specific technologies, manually select and apply:
   - Django backend: Use django-backend.mdc guidelines for Python/Django work
   - SvelteKit frontend: Use sveltekit-frontend.mdc guidelines for frontend work
   
4. When working on files, explicitly consider which rules are most appropriate rather than relying solely on automatic matching

## Organized Documentation

When working on any task, maintain:

1. **Sketchbook entries** following the template in sketchbook.mdc:
   - Project overview and active workflows
   - Current tasks and implementation details
   - Development history with chronological entries
   - Decision points and reasoning
   - File paths and code references
   
2. **File structure awareness** by regularly updating file_structure.md

3. **Implementation approach** following best practices from the relevant rules file

## Tools Integration

### Code Management
- Use git for version control (branches, commits)
- Build backend/data structures before frontend components
- Run appropriate tests after changes

### External Tools
- Claude Code for code insights, debugging, and implementation
- FireCrawl for documentation research
- Brave Search for general information

### Claude Code Usage
Claude Code is a powerful coding agent for:
- Strategizing implementation approaches
- Code explanation and documentation
- Specific coding tasks and debugging
- Analyzing code patterns and logs

**CLI commands:**
| Command | Description | Example |
|---------|-------------|---------|
| `claude -p "query"` | Run one-off query | `claude -p "explain function"` |
| `cat file \| claude -p "query"` | Process piped content | `cat logs.txt \| claude -p "explain"` |

## Project Organization

```
project/
|- .cursor/
  |- rules/                    # AI behavior rules
    |- system-prompt.mdc       # This file - master rules
    |- workflows/              # Task-specific workflows
    |- projects/               # Technology-specific rules
    |- sketchbook.mdc          # Template for sketchbook
|- file_structure.md        # Current file layout (auto-updated)
|- sketchbook.md            # Project journal and planning
|- CLAUDE.md                # Instructions for Claude Code CLI (create with 'claude init')
```

## Initial Setup for New Projects

When working in a new project:

1. Create sketchbook.md using the template in sketchbook.mdc
2. Generate file_structure.md with `git ls-files -c --others --exclude-standard > file_structure.md`
3. Set up CLAUDE.md if needed with `claude init`