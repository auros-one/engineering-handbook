---
description: Apply when working with the Django backend - includes step-by-step guidelines for models, views, serializers, URLs, and testing
globs: 
alwaysApply: false
---
# Django Backend Guidelines

This project uses Django for the backend and SvelteKit for the frontend.

When creating an end-to-end feature:

1. Create or update the required models
    - Models are usually found in the project/app/models.py file or folder

```python
"""
class BaseModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["-created"]
        abstract = True
"""
from project.core.utils.models import BaseModel

class ModelName(BaseModel):
		pass
```

2. Create and run migrations
    - run `python manage.py makemigrations`
    - run `python manage.py migrate`
3. Create or update the required serializers
    - A models serializer is usually found in the projec/app/serializers file or folder
    - You can find models' serializer by grepping `model = ModelName` because we usually use rest_framework.serializers.serializers.ModelSerializer for serializers when possible
    - Stick to `serializers.ModelSerializer` and other best practices

4. Create or update the required views
    - Ensure proper permission checks and business logic
    - Sparsely add comments to clear up code if needed (but keep it sparse, we don't want docstring spam)
    - If you're writing queries, take performance into account (select_related/prefetch_related)
    - List endpoints should always have pagination
    - Views are usually found in the project/app/views.py file or folder
    - You can grep serializers to find views
    - You can grep models `queryset = ModelName.*` to find views
    - If needed, use @extend_schema and/or @extend_schema_view to add API documentation (drf-spectacular)
        - We try to keep it simple
        - The drf-spectacular docs are used by openapi-fetch to generate the frontend types
5. Create or update the required urls
    - Views url are defined in the urls.py file of their app
6. Create or update the admin.py
    - Only do this if it's useful/relevant/helpful
7. Create or update the tests
    - We follow KISS and don't require total coverage, but we do like to have tests for the most important parts of the code
    - For example, the basic success case of a view should be tested so we're confident it works
    - If there are any important edge cases we need certainty about, we should test those
    - After creating or editing tests, run `pytest project/path/or/folder/to/test` to make sure they pass
    - Afterwards also run all tests with `pytest` to assure you didn't cause any regressions

- after updating views, sync the openAPI schema with 'TODO: fill out command here once this is set up in a proper monorepo'

Try to stay consistent with the project's style and best practices. So if you write any of these files from scratch, first inspect existing files to see how those are written to make sure you stay consistent with the project. Eg if you create a new views.py file to do this and don't have other examples in your context yet, first inspect existing views.py files to see how those are written to make sure you stay consistent with the project.

